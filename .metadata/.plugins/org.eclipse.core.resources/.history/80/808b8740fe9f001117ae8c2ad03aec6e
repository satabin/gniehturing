/**
 * *************************************************************************
 *    This file is part of GTuring.                                        *
 *                                                                         *
 *  GTuring is free software: you can redistribute it and/or modify        *
 *  it under the terms of the GNU General Public License as published by   *
 *  the Free Software Foundation, either version 3 of the License, or      *
 *  (at your option) any later version.                                    *
 *                                                                         *
 *  GTuring is distributed in the hope that it will be useful,             *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of         *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
 *  GNU General Public License for more details.                           *
 *                                                                         *
 *  You should have received a copy of the GNU General Public License      *
 *  along with GTuring.  If not, see <http://www.gnu.org/licenses/>.       *
 *                                                                         *
 * *************************************************************************
 */
package gnieh.turing
package compiler

import java.io.File
import util._
import parser.TMDLFileParser
import scopt.immutable.OptionParser

/**
 * This is the main method, entry point for the gniehturing compiler
 *
 * @author Lucas Satabin
 *
 */
object GniehTuringC extends App {

  val optionsParser = new OptionParser[Options]("gtc", "3.0") {
    def options = Seq(
      arg("<file>...", ".tmdl files to compile")( {
        (f, c) => c.copy(files = new File(f) :: c.files)
      }))
  }

  val files = args.map { value =>
    new File(value)
  }.toList

  val reporter = new ConsoleReporter with CountingReporter

  // parses the files
  val parser = new TMDLFileParser(files, reporter)
  val units = parser.parseAllFiles

  // the different passes as runners
  val runners =
    Runner(reporter, new SymbolTableBuilder(reporter)) andThen
      // TODO type inference
      Runner(reporter, new ReferenceChecker(reporter))

  // let's go and do the job!
  runners.run(units)

}